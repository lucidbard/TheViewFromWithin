// // Seebright SDK Ver 1.1
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
public class sbCursors : MonoBehaviour
{
	public bool show3DCursor;
	public bool show2DCursor;
	private GameObject seebrightCursorsInstance;
	public GameObject seebrightCursors;
	[HideInInspector]
	public static GameObject seebrightCursor3D;
	[HideInInspector]
	public static GameObject seebrightCursor2D;
	[Range (1,5)]
	public static float cursor2DScale = 2.0f;
	private Vector3 cursor2DScaleVector;
	public static Vector3 mouseDelta;
	public static Vector3 mouseLastPosition;
	public static Vector3 cursorScreenDelta = new Vector3 ();
	public static Vector3 cursorScreenPosition = new Vector3 ();
	public GameObject interactionPlane;
	public bool rightEyeDominant = true;
	
	public static int trackerRadius;
	public bool enableCursors;

    public sbCursors ()
    {
		if (enableCursors) {
			if (GameObject.Find ("seebrightCursors") == null) {
				seebrightCursorsInstance = (GameObject)GameObject.Instantiate (seebrightCursors);
				seebrightCursorsInstance.name = "seebrightCursors";
				seebrightCursorsInstance.transform.parent = sbCamera.designatedCamera.transform;
			} else
				seebrightCursorsInstance = GameObject.Find ("seebrightCursors");
			
			if (seebrightCursor3D == null) {
				seebrightCursor3D = GameObject.Find ("seebrightCursor3D");
			}
			
			if (show3DCursor) {
				seebrightCursor3D.renderer.enabled = true;
			} else {
				if (GameObject.Find ("seebrightCursor3D") != null) {
					GameObject.Find ("seebrightCursor3D").renderer.enabled = false;
				}
			}
			if (seebrightCursor2D == null) {
				seebrightCursor2D = GameObject.Find ("seebrightCursor2D");
			}
			if (show2DCursor) {
				GameObject.Find ("seebrightCursor2D").renderer.enabled = true;
				cursor2DScaleVector.x = cursor2DScaleVector.y = cursor2DScaleVector.z = cursor2DScale;
				seebrightCursor2D.transform.localScale = cursor2DScaleVector;
			} else {
				if (GameObject.Find ("seebrightCursor2D") != null) {
					GameObject.Find ("seebrightCursor2D").renderer.enabled = false;
				}
			}
			
			if (interactionPlane == null) {
				interactionPlane = GameObject.Find ("seebrightInteractionPlane");
			}
			// HACK -- Intended to move cursors into alignment with everything else.
			#if (UNITY_IPHONE || UNITY_ANDROID) && !UNITY_EDITOR
			seebrightCursorsInstance.transform.RotateAround (seebrightCursorsInstance.transform.position, seebrightCursorsInstance.transform.up, 180);
			seebrightCursorsInstance.transform.RotateAround (seebrightCursorsInstance.transform.position, seebrightCursorsInstance.transform.forward, 180);
			seebrightCursorsInstance.transform.RotateAround (seebrightCursorsInstance.transform.position, seebrightCursorsInstance.transform.right, 330);
			#endif
		}
    }

	
	public void SetDepth (int radius)
	{
		int minRadius, maxRadius;
		float xPos, yPos;
		minRadius = 25;
		maxRadius = 120;
		
		xPos = Mathf.InverseLerp (0f, 640.0f, cursorScreenPosition.x);
		yPos = Mathf.InverseLerp (480.0f, 0.0f, cursorScreenPosition.y);

		// Determine the 3D position of the viewpoint using the 2D position of the cursor.
//		Vector3 screenPos = sbMainCamera.rightCamera.camera.ViewportToWorldPoint (new Vector3(xPos, yPos, ((Mathf.InverseLerp((float)maxRadius, (float)minRadius, (float)radius) * local3DScale) + 50)));
//		seebrightCursors.seebrightCursor3D.transform.position = screenPos;
	}
	
	// Primarily handles the cursor locations.
	void FixedUpdate ()
	{
		// The following was intended to align a 2D representation of the cursors position using either right or left cameras.
		/*
		if (sbMainCamera != null && sbMainCamera.leftCamera != null && sbMainCamera.rightCamera != null) {
			designatedInterfaceCamera = (rightEyeDominant) ? sbMainCamera.rightCamera.camera : sbMainCamera.leftCamera.camera;
			if (show2DCursor) {
				RaycastHit hit; 
				viewportPoint = designatedInterfaceCamera.ScreenToViewportPoint (cursorScreenPosition);
				if (!float.IsNaN (viewportPoint.x)) {
					ray = designatedInterfaceCamera.ViewportPointToRay (viewportPoint);
					rayPoint = ray.origin;
					rayDir = ray.direction;
					int seebrightLayer = 1 << 9;
					seebrightLayer = ~seebrightLayer;
					if (Physics.Raycast (ray,
					                     out hit, 1000f, seebrightLayer)) {
						seebrightCursor2D.transform.position = hit.point; 
						rayDest = hit.point;
					}
				}
			}
		}
		*/
	}
}

